{"version":3,"sources":["components/Login/styles.js","components/shared/Link/index.js","components/Login/index.js","components/Dashboard/index.js","App.js","serviceWorker.js","index.js","assets/img/backgroundSky.jpg"],"names":["Background","styled","div","img","backgroundImageDimensions","calculateFormLeft","backgroundElement","screenRect","getBoundingClientRect","imageScaleFactor","Math","min","width","height","imageWidth","moonMiddleOnImage","backgroundCutOffOnTheLeft","formLeft","round","LoginForm","form","props","left","inputClasses","makeStyles","root","marginBottom","borderColor","transition","animation","borderWidth","boxShadow","color","background","LoginInput","otherProps","classes","TextField","variant","buttonClasses","opacity","letterSpacing","textShadow","LoginButton","Button","disableElevation","disableRipple","StyledParticles","style","position","top","options","fpsLimit","interactivity","modes","bubble","distance","duration","size","particles","value","shadow","blur","enable","offset","x","y","links","collisions","move","random","speed","direction","out_mode","number","density","shape","type","detectRetina","styles","noUnderline","display","textDecoration","StyledLink","PropTypes","bool","Login","useState","setFormLeft","backgroundRef","useRef","useEffect","current","window","addEventListener","ref","label","Link","to","Dashboard","App","basename","process","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.95ad0deb.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Particles from 'react-tsparticles';\nimport img from '../../assets/img/backgroundSky.jpg';\n\nexport const Background = styled.div`\n    height: 100vh;\n    width: 100%;\n    position: fixed;\n    top: 0;\n    left: 0;\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-position: 80% bottom;\n    background-image: url(${img});\n`;\n\nconst backgroundImageDimensions = {\n    width: 1000,\n    height: 563,\n    ratio: 1000 / 563\n};\n\nexport const calculateFormLeft = backgroundElement => {\n    if (backgroundElement) {\n        const screenRect = backgroundElement.getBoundingClientRect();\n        const imageScaleFactor = Math.min(backgroundImageDimensions.width / screenRect.width, backgroundImageDimensions.height / screenRect.height);\n        const imageWidth = backgroundImageDimensions.width / imageScaleFactor;\n        const moonMiddleOnImage = imageWidth * 0.72;\n        const backgroundCutOffOnTheLeft = 0.8 * (imageWidth - screenRect.width);\n        const formLeft = Math.round(moonMiddleOnImage - backgroundCutOffOnTheLeft);\n\n        return `${formLeft}px`;\n    }\n    return '60%';\n};\n\nexport const LoginForm = styled.form`\n    position: fixed;\n    top: 30%;\n    left: ${props => props.left};\n    width: 300px;\n    display: flex;\n    flex-direction: column;\n    transform: translateX(-50%);\n    @media (max-width: 500px) {\n        left: 50%;\n        width: 80%;\n    }\n`;\n\nconst inputClasses = makeStyles({\n    root: {\n        marginBottom: 30,\n        '& .MuiOutlinedInput-notchedOutline': {\n            borderColor: '#ddd6d370',\n            transition: 'all 300ms ease-in',\n        },\n        '&:hover .MuiOutlinedInput-notchedOutline': {\n            borderColor: '#fffc9680',\n            animation: `$pulsate 3s ease-in-out infinite`\n        },\n        '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline': {\n            borderColor: '#fffc96',\n            borderWidth: 1,\n            boxShadow: '0px 0px 10px 4px rgba(255,252,150,0.5)',\n            animation: 'unset'\n        },\n\n        '& .MuiFormLabel-root': {\n            color: '#ddd6d3',\n            transition: 'color 300ms ease-in,transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms'\n        },\n        '&:hover .MuiFormLabel-root': {\n            color: '#fffc96'\n        },\n        '& .Mui-focused.MuiFormLabel-root': {\n            color: '#fffc96'\n        },\n\n        '& .MuiOutlinedInput-input': {\n            color: '#fffffb',\n            transition: 'background 300ms ease-in'\n        },\n        '& .Mui-focused .MuiOutlinedInput-input': {\n            background: 'linear-gradient(90deg, rgba(10,27,76,0.7) 0%, rgba(6,17,61,0.7) 100%)',\n        }\n    },\n    \"@keyframes pulsate\": {\n        \"0%\": {\n            boxShadow: '0px 0px 5px 1px rgba(255,255,250,0.3)'\n        },\n        \"50%\": {\n            boxShadow: '0px 0px 20px 6px rgba(255,252,150,1)'\n        },\n        \"100%\": {\n            boxShadow: '0px 0px 5px 1px rgba(255,255,250,0.3)'\n        },\n    }\n});\n\nexport const LoginInput = ({ ...otherProps }) => {\n    const classes = inputClasses();\n    return <TextField classes={ classes } variant=\"outlined\" { ...otherProps } />;\n};\n\nconst buttonClasses = makeStyles({\n    root: {\n        background: 'linear-gradient(90deg, rgba(10,27,76,1) 0%, rgba(6,17,61,1) 100%)',\n        color: '#fffffb',\n        opacity: 0.7,\n        transition: 'all 300ms ease-in',\n        width: '100%',\n        '&:hover': {\n            animation: `$pulsate 3s ease-in-out infinite`,\n            background: 'linear-gradient(90deg, rgba(10,27,76,1) 0%, rgba(6,17,61,1) 100%)',\n            color: '#fffc96',\n            opacity: 0.9,\n        },\n        '& span': {\n            letterSpacing: 1,\n            opacity: 1,\n        },\n    },\n    \"@keyframes pulsate\": {\n        \"0%\": {\n            textShadow: '0 0 20px #fffc96'\n        },\n        \"50%\": {\n            textShadow: '0 0 6px #fffc96'\n        },\n        \"100%\": {\n            textShadow: '0 0 20px #fffc96'\n        },\n    }\n});\n\n\nexport const LoginButton = ({ ...otherProps }) => {\n    const classes = buttonClasses();\n    return <Button\n        classes={ classes }\n        disableElevation\n        disableRipple\n        variant=\"contained\"\n        { ...otherProps } />;\n};\n\nexport const StyledParticles = () => (\n    <Particles\n        style={{\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            width: '100%',\n            height: '100%'\n        }}\n        options={{\n            fpsLimit: 60,\n            interactivity: {\n                modes: {\n                    bubble: {\n                        distance: 400,\n                        duration: 2,\n                        opacity: 0.8,\n                        size: 40,\n                    },\n                },\n            },\n            particles: {\n                color: {\n                    value: \"#fffc96\",\n                },\n                shadow: {\n                    blur: 20,\n                    color: {\n                        value: \"#fffc96\"\n                    },\n                    enable: true,\n                    offset: {\n                        x: 0,\n                        y: 0\n                    }\n                },\n                links: {\n                    enable: false,\n                },\n                collisions: {\n                    enable: false,\n                },\n                move: {\n                    enable: true,\n                    random: true,\n                    speed: 1,\n                    direction: \"top\",\n                    out_mode: \"out\"\n                },\n                number: {\n                    density: {\n                    enable: false,\n                    },\n                    value: 100,\n                },\n                opacity: {\n                    random: true,\n                    value: 0.5,\n                },\n                shape: {\n                    type: \"circle\",\n                },\n                size: {\n                    random: true,\n                    value: 15,\n                },\n            },\n            detectRetina: true,\n        }}\n    />\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst styles = {\n    noUnderline: {\n        display: 'block',\n        textDecoration: 'none',\n    }\n}\n\nconst StyledLink = ({ noUnderline, ...otherProps }) => {\n    return <Link style={ noUnderline ? styles.noUnderline : {} } { ...otherProps } />;\n};\n\nStyledLink.props = {\n    noUnderline: PropTypes.bool\n};\n\nexport default StyledLink;\n","import React, { useEffect, useRef, useState } from 'react';\nimport {\n    calculateFormLeft,\n    Background,\n    LoginButton,\n    LoginForm,\n    LoginInput,\n    StyledParticles as Particles\n} from './styles';\nimport Link from '../shared/Link';\n\nconst Login = () => {\n    const [formLeft, setFormLeft] = useState('60%');\n    const backgroundRef = useRef();\n\n    useEffect(() => {\n        setFormLeft(calculateFormLeft(backgroundRef.current));\n        window.addEventListener('resize', () => setFormLeft(calculateFormLeft(backgroundRef.current)));\n    }, []);\n\n    return (\n        <>\n            <Background ref={ backgroundRef }>\n                <Particles />\n                <LoginForm left={ formLeft }>\n                    <LoginInput label=\"Login\" />\n                    <LoginInput label=\"Password\" />\n                    <Link to=\"/dashboard\" noUnderline>\n                        <LoginButton>Enter</LoginButton>\n                    </Link>\n                </LoginForm>\n            </Background>\n        </>\n    );\n};\n\nexport default Login;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nconst Dashboard = () => {\n    return (\n        <>\n            <div>Hello world!</div>\n            <Link to=\"/login\">login</Link>\n        </>\n    );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\n\nimport Login from './components/Login';\nimport Dashboard from './components/Dashboard';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/dashboard\">\n          <Dashboard />\n        </Route>\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n        <Route path=\"/\">\n          <Login />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/backgroundSky.700e3840.jpg\";"],"sourceRoot":""}